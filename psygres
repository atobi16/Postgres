#!/usr/bin/env python3
import psycopg2
import getpass as g
try:
	conn=psycopg2.connect('dbname=postgres user=postgres')
except:
	raise NameError("Couldn't access PostgreSQL database.")
cur=conn.cursor()
def pprint():
	for line in cur.fetchall():
		print(line)

def GetOutNormie():
	raise NameError("NORMIES GET OUT")
def GetOutHacker():
	raise NameError("I'm sorry, Dave. I'm afraid I can't do that.")


def injcheck(code, checklist=['items','people','transactions'],white=True):
	if (code in checklist)^white: #if the code is in the blacklist or isn't in the whitelist
		GetOutHacker() #get shrekt
	else: #if code in whitelist or not in blacklist
		return(code) #proceed


command=input('Select: showtable, unnorm, addtrans, droptrans, upsert, sql\n').lower()

if command not in ['showtable','unnorm','addtrans','droptrans','upsert','sql']:
	GetOutNormie()


else:	#literally everything goes in here
	if command=='showtable':
		table=input('Table:')
		cur.execute('select * from '+injcheck(table)+';')
		pprint()
	

	elif command=='unnorm':
		cur.execute('select transactions.id, transactions.person, transactions.item, people.firstname, people.lastname, items.name, items.price, transactions.quantity, transactions.discount from transactions inner join items on transactions.item=items.id inner join people on transactions.person=people.id order by transactions.id')
		pprint()
	

	elif command in ['addtrans','droptrans','upsert','sql']:
		passguess=g.getpass("Admin password:") #Meet getpass.getpass()! This is input(), but doesn't show what you're typing. Perfect for passwords.
		password='mellon'
		if passguess!=password:
			GetOutNormie()
		cur.execute('select max(id)from transactions;')
		tid=int(cur.fetchone()[0]) #This is the last added row id.
		

		if command=='addtrans':
			cur.execute('select max(id)from people;')
			biggestpid=int(cur.fetchone()[0])
			cur.execute('select max(id)from items;')
			biggestiid=int(cur.fetchone()[0])
			
			cur.execute('select * from people;')
			pprint()
			pid=int(input('Select person ID:'))
			
			cur.execute('select * from items;')
			pprint()
			iid=int(input('Select item ID:'))
			
			quantity=int(input('Select quantity:'))

			discount=float(input('Percent off:'))/100
			
			if pid<0 or pid>biggestpid or iid<0 or iid>biggestiid or discount>1 or discount<0:
				GetOutNormie()
			
			tid+=1
			tid=str(tid)
			pid=str(pid)
			iid=str(pid)
			quantity=str(quantity)
			discount=str(discount)
			cur.execute('insert into transactions values('+tid+','+pid+','+iid+','+quantity+','+discount+');')
			conn.commit()
		

		elif command=='droptrans':
			dropid=int(input("Select row:"))
			if dropid<0 or dropid>tid: #if dropid is not in the range of ids present:
				GetOutNormie()
			cur.execute('delete from transactions where id='+str(dropid)+';')
			conn.commit()
		
		
		elif command=='upsert':
			cur.execute('select max(id)from people;')
			biggestpid=int(cur.fetchone()[0])
			cur.execute('select max(id)from items;')
			biggestiid=int(cur.fetchone()[0])
			
			
			cur.execute('select transactions.id, transactions.person, transactions.item, people.firstname, people.lastname, items.name, items.price, transactions.quantity, transactions.discount from transactions inner join items on transactions.item=items.id inner join people on transactions.person=people.id order by transactions.id')
			pprint()
			tid=int(input('Select row:'))

			cur.execute('select * from people;')
			pprint()
			pid=int(input('Select person ID:'))
			
			cur.execute('select * from items;')
			pprint()
			iid=int(input('Select item ID:'))
			
			quantity=int(input('Select quantity:'))

			discount=float(input('Percent off:'))/100
			
			if pid<0 or pid>biggestpid or iid<0 or iid>biggestiid or discount>1 or discount<0:
				GetOutNormie()
			
			tid=str(tid)
			pid=str(pid)
			iid=str(pid)
			quantity=str(quantity)
			discount=str(discount)
			cur.execute('delete from transactions where id='+tid+'; insert into transactions values('+tid+','+pid+','+iid+','+quantity+','+discount+');')
			conn.commit()
		
		elif command=='sql':
			sql=input('sql:')
			cur.execute(sql)
			pprint()
			conn.commit()

